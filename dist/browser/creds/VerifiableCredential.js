'use strict';var _toConsumableArray2=require("babel-runtime/helpers/toConsumableArray"),_toConsumableArray3=_interopRequireDefault(_toConsumableArray2),_regenerator=require("babel-runtime/regenerator"),_regenerator2=_interopRequireDefault(_regenerator),_asyncToGenerator2=require("babel-runtime/helpers/asyncToGenerator"),_asyncToGenerator3=_interopRequireDefault(_asyncToGenerator2),cryptographicallySecureVerify=function(){var a=(0,_asyncToGenerator3.default)(_regenerator2.default.mark(function a(b,c,d){var e,f;return _regenerator2.default.wrap(function(a){for(;;)switch(a.prev=a.next){case 0:if(nonCryptographicallySecureVerify(b)){a.next=2;break}return a.abrupt("return",!1);case 2:if(!c){a.next=8;break}return a.next=5,c(b.proof);case 5:if(e=a.sent,e){a.next=8;break}return a.abrupt("return",!1);case 8:if(!d){a.next=14;break}return a.next=11,d(b.proof);case 11:if(f=a.sent,f){a.next=14;break}return a.abrupt("return",!1);case 14:return a.abrupt("return",!0);case 15:case"end":return a.stop();}},a,this)}));return function(){return a.apply(this,arguments)}}();function _interopRequireDefault(a){return a&&a.__esModule?a:{default:a}}var _=require("lodash"),validUrl=require("valid-url"),sift=require("sift"),timestamp=require("unix-timestamp"),flatten=require("flat"),_require=require("uuid"),uuidv4=_require.v4,MerkleTools=require("merkle-tools"),_require2=require("../lib/crypto"),sha256=_require2.sha256,_require3=require("../claim/Claim"),Claim=_require3.Claim,definitions=require("./definitions"),_require4=require("../services"),services=_require4.services,time=require("../timeHelper"),_require5=require("./CvcMerkleProof"),CvcMerkleProof=_require5.CvcMerkleProof,_require6=require("./ClaimModel"),ClaimModel=_require6.ClaimModel,convertDeltaToTimestamp=function(a){return time.applyDeltaToDate(a).getTime()/1e3};function validIdentifiers(){var a=_.map(definitions,function(a){return a.identifier});return a}function getClaimsWithFlatKeys(a){var b=flatten(a,{maxDepth:3}),c=flatten(a,{maxDepth:2}),d=_.merge({},b,c);return _(d).toPairs().sortBy(0).fromPairs().value()}function getLeavesClaimPaths(a){return _.map(a,"claimPath")}function verifyLeave(a,b,c,d,e,f,g){var h=new Claim(a.identifier,{attestableValue:a.value});if("String"===h.type||"Number"===h.type)h.value!==_.get(c,a.claimPath)&&e.push(a.value);else if("Object"===h.type){var i=h.value,j=_.get(c,a.claimPath),k=_.last(_.split(a.claimPath,".")),l={};l[k]=j;var m=_.keys(h.value);_.each(m,function(a){var b=_.get(l,a);b&&""+_.get(i[a],"value")!=""+b&&e.push(l[a])})}else if("Array"===h.type){var n=_.get(c,a.claimPath);_.forEach(h.value,function(a,b){var c=n[b],d=_.keys(a.value);_.each(d,function(b){var d=_.get(c,b);d&&""+_.get(a.value,[b,"value"])!=""+d&&e.push(c[b])})})}else e.push(a.value);var o=sha256(a.value);o!==a.targetHash&&f.push(a.targetHash);var p=b.validateProof(a.node,a.targetHash,d.merkleRoot);p||g.push(a.targetHash)}function validateEvidence(a){if(_.forEach(["type","verifier","evidenceDocument","subjectPresence","documentPresence"],function(b){if(!(b in a))throw new Error("Evidence "+b+" is required")}),"id"in a&&!validUrl.isWebUri(a.id))throw new Error("Evidence id is not a valid URL");if(!_.isArray(a.type))throw new Error("Evidence type is not an Array object")}function serializeEvidence(a){var b=_.isArray(a)?a:[a];return _.map(b,function(a){return validateEvidence(a),{id:a.id,type:a.type,verifier:a.verifier,evidenceDocument:a.evidenceDocument,subjectPresence:a.subjectPresence,documentPresence:a.documentPresence}})}function transformConstraint(a){var b=[];return _.forEach(a.claims,function(a){if(!a.path)throw new Error("Malformed contraint: missing PATTH");if(!a.is)throw new Error("Malformed contraint: missing IS");var c={};c[a.path]=a.is,b.push(c)}),b}function isDateStructure(a){var b=_.keys(a);return!(3!==b.length)&&_.includes(b,"day")&&_.includes(b,"month")&&_.includes(b,"year")}function nonCryptographicallySecureVerify(a){var b=_.clone(a.expirationDate),c=_.clone(a.claim),d=_.clone(a.proof),e=_.get(d,"leaves"),f=!1,g=new MerkleTools,h=getClaimsWithFlatKeys(c),i=getLeavesClaimPaths(e),j=[],k=[],l=[],m=[],n=[];_.forEach(_.keys(h),function(a){var b=_.indexOf(i,a);if(-1===b){_.findLastIndex(a,".");var f=a.substring(0,_.lastIndexOf(a,"."));if(-1<_.indexOf(i,f))return;j.push(a)}else{var h=e[b];verifyLeave(h,g,c,d,l,m,n)}});var o=_.indexOf(i,"meta.expirationDate");if(0<=o){var p=e[o],q=l.length+m.length+n.length;verifyLeave(p,g,{meta:{expirationDate:b}},d,l,m,n);var r=l.length+m.length+n.length;if(r===q&&null!==b){var s=new Date,t=new Date(b);s.getTime()>t.getTime()&&k.push(b)}}return _.isEmpty(j)&&_.isEmpty(l)&&_.isEmpty(m)&&_.isEmpty(n)&&_.isEmpty(k)&&(f=!0),f}function requesterGrantVerify(a,b,c,d){var e=_.get(a.proof,"anchor.subject.label"),f=_.get(a.proof,"anchor.subject.pub"),g=_.get(a.proof,"anchor.subject.data");if(_.isEmpty(a.granted)||_.isEmpty(e)||_.isEmpty(f))return!1;var h=sha256(""+e+g+b+c),i=services.container.CryptoManager,j=d;if(_.isEmpty(j)){if(!_.isFunction(i.installKey))throw new Error("CryptoManager does not support installKey, please use a `keyName` instead.");j="TEMP_KEY_NAME_"+new Date().getTime(),i.installKey(j,f)}return i.verify(j,h,a.granted)}function transformDate(a){return new Date(a.year,a.month-1,a.day).getTime()/1e3}var VERIFY_LEVELS={INVALID:-1,PROOFS:0,ANCHOR:1,GRANTED:2,BLOCKCHAIN:3};function verifyRequiredClaims(a,b){if(!_.isEmpty(a.required)){var c=b.map(function(a){return a.identifier}),d=_.difference(a.required,c);if(!_.isEmpty(d))throw new Error("Missing required claim(s): "+_.join(d,", "))}}function verifyRequiredClaimsFromJSON(a,b){var c=_.get(b,"proof.leaves");if(!_.isEmpty(a.required)&&c){var d=c.map(function(a){return a.identifier}),e=_.difference(a.required,d);if(!_.isEmpty(e))throw new Error("Missing required claim(s): "+_.join(e,", "))}}function getCredentialDefinition(a,b){var c;if(c=b?_.find(definitions,{identifier:a,version:""+b}):_.find(definitions,{identifier:a}),!c)throw new Error("Credential definition for "+a+" v"+b+" not found");return c}function VerifiableCredentialBaseConstructor(a,b,c,d,e,f){var g=this;this.id=uuidv4(),this.issuer=b;var h=new Claim("cvc:Meta:issuer",this.issuer);this.issuanceDate=new Date().toISOString();var i=new Claim("cvc:Meta:issuanceDate",this.issuanceDate);this.identifier=a,this.expirationDate=c?timestamp.toDate(timestamp.now(c)).toISOString():null;var j=new Claim("cvc:Meta:expirationDate",this.expirationDate?this.expirationDate:"null"),k=j?_.concat(d,h,i,j):_.concat(d,h,i);if(!_.includes(validIdentifiers(),a))throw new Error(a+" is not defined");var l=getCredentialDefinition(a,e);if(this.version=""+e||l.version,this.type=["Credential",a],this.transient=l.transient||!1,f&&(this.evidence=serializeEvidence(f)),!_.isEmpty(d)){if(verifyRequiredClaims(l,d),this.claim=new ClaimModel(d),this.proof=new CvcMerkleProof(k),!_.isEmpty(l.excludes)){var m=_.remove(this.proof.leaves,function(a){return _.includes(l.excludes,a.identifier)});_.forEach(m,function(a){_.unset(g.claim,a.claimPath)})}this.granted=null}this.getGlobalIdentifier=function(){return"credential-"+g.identifier+"-"+g.version},this.filter=function(a){var b=_.cloneDeep(g);return _.remove(b.proof.leaves,function(b){return!_.includes(a,b.identifier)}),b.claim={},_.forEach(b.proof.leaves,function(a){_.set(b.claim,a.claimPath,_.get(g.claim,a.claimPath))}),b},this.requestAnchor=function(){var a=(0,_asyncToGenerator3.default)(_regenerator2.default.mark(function a(b){var c,d,e;return _regenerator2.default.wrap(function(a){for(;;)switch(a.prev=a.next){case 0:if(!g.transient){a.next=3;break}return g.proof.anchor={type:"transient",subject:{label:g.identifier,data:g.proof.merkleRoot}},a.abrupt("return",g);case 3:return c=services.container.AnchorService,d=_.merge({},b,{subject:{label:g.identifier,data:g.proof.merkleRoot}}),a.next=7,c.anchor(d);case 7:return e=a.sent,g.proof.anchor=e,a.abrupt("return",g);case 10:case"end":return a.stop();}},a,g)}));return function(){return a.apply(this,arguments)}}(),this.updateAnchor=(0,_asyncToGenerator3.default)(_regenerator2.default.mark(function a(){var b,c;return _regenerator2.default.wrap(function(a){for(;;)switch(a.prev=a.next){case 0:if(!g.transient){a.next=3;break}return g.proof.anchor={type:"transient",subject:{label:g.identifier,data:g.proof.merkleRoot}},a.abrupt("return",g);case 3:return b=services.container.AnchorService,a.next=6,b.update(g.proof.anchor);case 6:return c=a.sent,g.proof.anchor=c,a.abrupt("return",g);case 9:case"end":return a.stop();}},a,g)})),this.verifyProofs=function(){return nonCryptographicallySecureVerify(g)},this.verify=function(a,b){var c=b||{},d=c.requestorId,e=c.requestId,f=c.keyName,h=_.isNil(a)?VERIFY_LEVELS.GRANTED:a,i=VERIFY_LEVELS.INVALID;return i===VERIFY_LEVELS.INVALID&&h>=VERIFY_LEVELS.PROOFS&&g.verifyProofs()&&(i=VERIFY_LEVELS.PROOFS),i===VERIFY_LEVELS.PROOFS&&h>=VERIFY_LEVELS.ANCHOR&&g.verifyAttestation()&&(i=VERIFY_LEVELS.ANCHOR),i===VERIFY_LEVELS.ANCHOR&&h>=VERIFY_LEVELS.GRANTED&&g.verifyGrant(d,e,f)&&(i=VERIFY_LEVELS.GRANTED),i},this.verifySignature=function(a){return"transient"===g.proof.type||services.container.AnchorService.verifySignature(g.proof,a)},this.verifyAttestation=(0,_asyncToGenerator3.default)(_regenerator2.default.mark(function a(){return _regenerator2.default.wrap(function(a){for(;;)switch(a.prev=a.next){case 0:if("transient"!==g.proof.anchor.type&&"dummynet"!==g.proof.anchor.network){a.next=2;break}return a.abrupt("return",!0);case 2:return a.abrupt("return",services.container.AnchorService.verifyAttestation(g.proof));case 3:case"end":return a.stop();}},a,g)})),this.revokeAttestation=(0,_asyncToGenerator3.default)(_regenerator2.default.mark(function a(){return _regenerator2.default.wrap(function(a){for(;;)switch(a.prev=a.next){case 0:if("transient"!==g.proof.type){a.next=2;break}return a.abrupt("return");case 2:return a.abrupt("return",services.container.AnchorService.revokeAttestation(g.proof));case 3:case"end":return a.stop();}},a,g)})),this.isRevoked=(0,_asyncToGenerator3.default)(_regenerator2.default.mark(function a(){return _regenerator2.default.wrap(function(a){for(;;)switch(a.prev=a.next){case 0:if("transient"!==g.proof.type){a.next=2;break}return a.abrupt("return",!1);case 2:return a.abrupt("return",services.container.AnchorService.isRevoked(g.proof));case 3:case"end":return a.stop();}},a,g)}));var n=function(a){return _.isString(a)?convertDeltaToTimestamp(a):a};return this.isMatch=function(a){var b=_.cloneDeep(g.claim),c=transformConstraint(a),d=function(a){var c=_.keys(a)[0],d=_.get(b,c);return isDateStructure(d)&&(_.set(b,c,transformDate(d)),_.set(a,c,_.mapValues(a[c],n))),sift(a)([b])};return c.reduce(function(a,b){return a&&d(b)},!0)},this.grantUsageFor=function(a,b,c){var d=c.keyName,e=c.pvtKey;if(_.isEmpty(_.get(g.proof,"anchor.subject.label"))||_.isEmpty(_.get(g.proof,"anchor.subject.data")))throw new Error("Invalid credential attestation/anchor");if(!g.verifySignature())throw new Error("Invalid credential attestation/anchor signature");if(!a||!b||!(d||e))throw new Error("Missing required parameter: requestorId, requestId or key");var f=""+g.proof.anchor.subject.label+g.proof.anchor.subject.data+a+b,h=sha256(f),i=services.container.CryptoManager,j=d;if(e){if(!_.isFunction(i.installKey))throw new Error("You provide a `pvtKey` but the CryptoManager does not support it, use a `keyName` instead.");j="TEMP_KEY_NAME_"+new Date().getTime(),i.installKey(j,e)}var k=i.sign(j,h);g.granted=k},this.verifyGrant=function(a,b,c){return requesterGrantVerify(g,a,b,c)},this}var CREDENTIAL_META_FIELDS=["id","identifier","issuer","issuanceDate","expirationDate","version","type"],getCredentialMeta=function(a){return _.pick(a,CREDENTIAL_META_FIELDS)};function transformMetaConstraint(a){var b=[],c=_.keys(a.meta);return _.forEach(c,function(c){var d=a.meta[c],e={};if("credential"===c)e.identifier=d;else if(d.is)e[c]=d.is;else throw new Error("Malformed meta constraint \""+c+"\": missing the IS");b.push(e)}),b}var isMatchCredentialMeta=function(a,b){var c=transformMetaConstraint(b);if(_.isEmpty(c))return!1;var d=function(b){return sift(b)([a])};return c.reduce(function(a,b){return a&&d(b)},!0)};VerifiableCredentialBaseConstructor.CREDENTIAL_META_FIELDS=CREDENTIAL_META_FIELDS,VerifiableCredentialBaseConstructor.getCredentialMeta=getCredentialMeta,VerifiableCredentialBaseConstructor.isMatchCredentialMeta=isMatchCredentialMeta,VerifiableCredentialBaseConstructor.fromJSON=function(a){var b=getCredentialDefinition(a.identifier,a.version);verifyRequiredClaimsFromJSON(b,a);var c=new VerifiableCredentialBaseConstructor(a.identifier,a.issuer);return c.id=_.clone(a.id),c.issuanceDate=_.clone(a.issuanceDate),c.expirationDate=_.clone(a.expirationDate),c.identifier=_.clone(a.identifier),c.version=_.clone(a.version),c.type=_.cloneDeep(a.type),c.claim=_.cloneDeep(a.claim),c.proof=_.cloneDeep(a.proof),c.granted=_.clone(a.granted)||null,c},VerifiableCredentialBaseConstructor.getAllProperties=function(a){var b=_.find(definitions,{identifier:a});if(b){var c=[];_.forEach(b.depends,function(a){c.push.apply(c,(0,_toConsumableArray3.default)(Claim.getAllProperties(a)))});var d=[];return _.forEach(b.excludes,function(a){d.push.apply(d,(0,_toConsumableArray3.default)(Claim.getAllProperties(a)))}),_.difference(c,d)}return null},VerifiableCredentialBaseConstructor.VERIFY_LEVELS=VERIFY_LEVELS,VerifiableCredentialBaseConstructor.nonCryptographicallySecureVerify=nonCryptographicallySecureVerify,VerifiableCredentialBaseConstructor.cryptographicallySecureVerify=cryptographicallySecureVerify,VerifiableCredentialBaseConstructor.requesterGrantVerify=requesterGrantVerify,module.exports=VerifiableCredentialBaseConstructor;